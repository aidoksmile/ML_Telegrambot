import time
import pandas as pd
from datetime import datetime
import requests
import config
import model
from strategy import MLStrategy
from backtesting import Backtest

print("[INFO] main.py –∑–∞–≥—Ä—É–∂–µ–Ω")

def send_telegram_message(text):
    try:
        url = f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": config.TELEGRAM_CHAT_ID,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        print("[INFO] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

def run_backtest(df, model_obj):
    try:
        bt_df = df.copy()
        bt_df.reset_index(inplace=True)
        bt_df.rename(columns={'timestamp': 'index'}, inplace=True)
        bt_df.set_index('index', inplace=True)

        bt = Backtest(bt_df, MLStrategy, cash=10_000, commission=0.0002)
        bt._broker._model = model_obj
        bt._broker._features = bt_df[['open', 'high', 'low', 'close', 'volume', 'ma_short', 'ma_long', 'volatility', 'momentum']]
        result = bt.run()
        return result
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ: {e}")
        return None

def generate_signal(df, model_obj):
    try:
        last_row = df.iloc[-1]
        features = last_row[['open', 'high', 'low', 'close', 'volume', 'ma_short', 'ma_long', 'volatility', 'momentum']].values.reshape(1, -1)
        direction = model_obj.predict(features)[0]
        entry_price = last_row['close']
        volatility = last_row['volatility']
        stop_loss = entry_price - 2 * volatility
        take_profit = entry_price + 4 * volatility
        return direction, entry_price, stop_loss, take_profit
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None, None, None, None

def process_symbol(symbol):
    print(f"[{datetime.now()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã: {symbol}")
    try:
        df = model.fetch_data(symbol)
        if df.empty:
            error_msg = f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø—É—Å—Ç—ã"
            print(error_msg)
            send_telegram_message(error_msg)
            return
    except Exception as e:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {e}"
        print(error_msg)
        send_telegram_message(error_msg)
        return

    try:
        X, y = model.prepare_features(df, config.LOOKAHEAD_DAYS)
        if X.empty or y.empty:
            error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {symbol}"
            print(error_msg)
            send_telegram_message(error_msg)
            return
    except Exception as e:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {e}"
        print(error_msg)
        send_telegram_message(error_msg)
        return

    try:
        model_obj = model.train_model(X, y)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è {symbol}: {e}"
        print(error_msg)
        send_telegram_message(error_msg)
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    direction, entry, sl, tp = generate_signal(df, model_obj)
    if direction is None:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}"
        print(error_msg)
        send_telegram_message(error_msg)
        return

    # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
    stats = run_backtest(df, model_obj)
    if stats is None:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è {symbol}"
        print(error_msg)
        send_telegram_message(error_msg)
        return

    roi = stats["Return [%]"]
    win_rate = stats["Win Rate [%]"]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
    signal_text = f"""
üîî **–°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}**
üïí –í—Ä–µ–º—è: {datetime.now()}
üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'BUY' if direction == 1 else 'SELL'}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:.2f}
üìâ Stop Loss: {sl:.2f}
üìà Take Profit: {tp:.2f}
üìä ROI: {roi:.2f}%
üéØ Win Rate: {win_rate:.2f}%
    """
    send_telegram_message(signal_text)
    print(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol}")

def main():
    print("[START] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    send_telegram_message("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("[–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω]")

    while True:
        try:
            for symbol in config.ASSETS:
                process_symbol(symbol)
            print(f"[–°–æ–Ω...] –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {config.UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥")
            time.sleep(config.UPDATE_INTERVAL)
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}"
            print(error_msg)
            send_telegram_message(error_msg)
            time.sleep(60)

if __name__ == "__main__":
    main()
