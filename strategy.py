import logging
import pandas as pd
import yfinance as yf
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from server import send_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ASSETS = ["XAUUSD", "EURUSD", "USDJPY"]
TICKER_MAP = {"XAUUSD": "GC=F", "EURUSD": "EURUSD=X", "USDJPY": "JPY=X"}
HISTORY_LIMIT = 200

def fetch_data(symbol):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Yahoo Finance —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    ticker = TICKER_MAP[symbol]
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (—Ç–∏–∫–µ—Ä: {ticker})...")
    try:
        df = yf.download(ticker, period="60d", interval="15m")
        if df.empty:
            logging.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({ticker}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            raise ValueError(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        df = df[["Open", "High", "Low", "Close", "Volume"]].rename(columns={
            "Open": "open", "High": "high", "Low": "low", "Close": "close", "Volume": "volume"
        })
        df = df.tail(HISTORY_LIMIT)
        logging.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –æ–±—Ä–µ–∑–∞–Ω—ã –¥–æ {HISTORY_LIMIT} –∑–∞–ø–∏—Å–µ–π")
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        raise

def prepare_features(df):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏."""
    df = df.copy()
    df['target'] = df['close'].shift(-4)
    df = df.dropna(subset=['target'])
    df['direction'] = (df['target'] > df['close']).astype(int)
    df['ma_short'] = df['close'].rolling(window=10).mean()
    df['ma_long'] = df['close'].rolling(window=50).mean()
    df['volatility'] = df['high'] - df['low']
    df['momentum'] = df['close'].diff(5)
    df = df.dropna()
    features = ['open', 'high', 'low', 'close', 'volume', 'ma_short', 'ma_long', 'volatility', 'momentum']
    logging.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏")
    return df[features], df['direction']

def train_model(X, y):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å."""
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)
    accuracy = accuracy_score(y_test, model.predict(X_test))
    logging.info(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {X.name}: {accuracy * 100:.2f}%")
    return model

def process_asset(symbol):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª."""
    try:
        df = fetch_data(symbol)
        X, y = prepare_features(df)
        X.name = symbol
        model = train_model(X, y)
        latest = X.iloc[-1].values.reshape(1, -1)
        signal = "–ü–æ–∫—É–ø–∫–∞" if model.predict(latest)[0] == 1 else "–ü—Ä–æ–¥–∞–∂–∞"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal}")
        send_message(f"üìà –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
        send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")

def generate_signals():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤."""
    logging.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    for symbol in ASSETS:
        process_asset(symbol)
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
